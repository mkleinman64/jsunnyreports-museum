package nl.mk.jsunnyreports.loaders.inverterdataloaders;

import au.com.bytecode.opencsv.CSVReader;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import nl.mk.jsunnyreports.common.Constants;
import nl.mk.jsunnyreports.common.settings.Settings;
import nl.mk.jsunnyreports.loaders.inverterdataloaders.filefilters.EndsWithFilenameFilter;
import nl.mk.jsunnyreports.dataobjects.cache.Files;
import nl.mk.jsunnyreports.dataobjects.inverterdata.InverterData;
import nl.mk.jsunnyreports.dataobjects.processfiles.FileEntries;
import nl.mk.jsunnyreports.dataobjects.processfiles.FileEntry;
import nl.mk.jsunnyreports.interfaces.LoaderInterface;

import nl.mk.jsunnyreports.inverters.BaseInverter;

import nl.mk.jsunnyreports.loaders.inverterdataloaders.processors.ArduinoFileProcessor;
import nl.mk.jsunnyreports.loaders.inverterdataloaders.processors.SoladinFileProcessor;

import org.apache.log4j.Logger;

/**
 * Soladin dataloader, reads custom csv files from .NET project written by Martin Kleinman, and reads soladin_ma.xls
 * containing manually entered data for a day.
 *
 * Date         Version     Who     What
 * 12-10-2010   1.1.1.0     MKL     Detected strange behaviour in .NET project with amount of columns being different.
 *                                  Fixed the code so it can use both file types.
 *                                  Updated to CSVReader to version 2.2
 *                                  Nasty : Remove BOM from first line.
 * 13-10-2010   1.1.1.0     MKL     Huge update how data is handled internally.
 * 18-10-2010   1.1.2.0     MKL     Updated and cleaned up code.
 * 19-10-2010   1.1.2.0     MKL     Further cleanup of the code. made internal methods private.
 * 27-11-2011   1.3.0.2A    MKL     Added filecache.
 * 03-12-2011   1.3.1.1     MKL     Updated filecache handling added invertername.
 * 09-12-2011   1.3.2.0     MKL     Updated to use Wh and long instead of kWh.
 * 14-12-2011   1.3.2.0     MKL     Removed all inline FilenameFilter classes and modified to them external filefilters.
 * 16-01-2012   1.3.2.0     MKL     Updated Exception handling, it will now continue if an error occurs in a file instead of crashing completely.
 * 18-01-2012   1.3.2.0     MKL     Split dataloader() into seperate method handlers.
 *
 * TODO:
 *
 * Byte Order Mark error still there. made bypass/patch but not structural.
 * Performance / bottleneck test on laptop Martin processing speed is around 6,3Mb/sec
 *
 * @author    Martin Kleinman ( martin@familie-kleinman.nl )
 * @version   1.3.2.0
 * @since     1.1.0.0beta
 */
public class SoladinDataLoader extends BaseLoader implements LoaderInterface {

    private static final Logger log = Logger.getLogger(SoladinDataLoader.class);

    public SoladinDataLoader(BaseInverter inverter, InverterData inverterData, Files fileCache, Settings s) {
        super(inverter, inverterData, fileCache, s);
    }

    /**
     * Removes one Soladin csv file generated by .NET logging program written by Martin Kleinman.
     * File can be in two formats.
     * 1. old : 9 columns
     * 2. new : 10 columns
     *
     * Old version contains a nasty bug, a Byte Order Mark is present in the first column on the first line.
     * Made a "bypass" for this problem which works but is nasty to say the least.
     *
     *
     * @param csvFile
     */
    private void csvFileRemove(File csvFile) {
        inverterData.setUpdated(true);
        int lineNumber = 0;
        DateFormat formatter;
        formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        formatter.setTimeZone(Constants.getLocalTimeZone());

        boolean bomFound = false;

        try {
            CSVReader reader = new CSVReader(new BufferedReader(new FileReader(csvFile)), ';');
            String[] nextLine;

            String date = "";

            boolean exitMe = false;
            while ((nextLine = reader.readNext()) != null && exitMe == false) {
                lineNumber++;
                // fix for odd behaviour in .NET Project writing files. should be 1 / 5 / 6 can be 0 / 4 / 5
                // with older dataLoader.

                // possible solution for this mess is:
                // determine linelength. and get vac
                // if vac is within boundaries do magic and get other columns.
                // might save some time and make code more readable.
                if (nextLine.length == 9) {
                    date = nextLine[0];

                    if (!bomFound) {
                        // nasty way of removing BOM. Should be encorporated in CSVReader itself
                        // http://mindprod.com/jgloss/bom.html
                        // chosen for option 6.
                        date = date.substring(3);
                        bomFound = true;
                    }
                } else {
                    // Length of the CSV = 10 columns.
                    date = nextLine[1];

                }
                if (date.length() > 0) {
                    exitMe = true;
                    Calendar cal = Calendar.getInstance(Constants.getLocalTimeZone());
                    try {
                        cal.setTime(formatter.parse(date));

                        // we now know the date and we can remove it from the list.
                        inverterData.removeDayFromSet(baseInverter, cal);

                    } catch (ParseException pe) {
                        log.error("ParseException on line: " + lineNumber + ". I cannot process \"" + date + "\" as a correct date. ");
                    }

                }
            }

        } catch (FileNotFoundException fnfe) {
            log.error("Somehow the file " + csvFile.getName() + " could not be found anymore, ignoring it.");
        } catch (IOException IOe) {
            log.error("An error has occured reading line: " + lineNumber + " in file: " + csvFile.getName());
        }

    }

    private void processFiles( boolean init, Integer year ) {
        FileEntries fe = this.processFiles(new EndsWithFilenameFilter(".csv"), true );

        ExecutorService executor = Executors.newFixedThreadPool(readThreadCount);
        for ( FileEntry f: fe.getFileList() ) {
            File newFile = new File( f.getFileLocation() );
            if ( f.isToDelete() ) {
                this.csvFileRemove( newFile );
            }
            if ( f.isToLoad() ) {
                Runnable fileData = new SoladinFileProcessor(newFile, inverterData, baseInverter, settings, init, year, f.getFc() );
                executor.execute(fileData);
            }

        }    
        executor.shutdown();
        while (!executor.isTerminated()) {
        }        
    }

    /**
     * Dataloader implementation from interface specification. Checks the input directory, gets the files
     * that match this dataloader type and process them accordingly.
     *
     * @throws DataLoadException
     * @since 1.0.0.0b
     */
    @Override
    public void dataLoader( boolean init, Integer year ) {
        this.processFiles( init, year );
        super.dataLoader( init, year );
    }
}
